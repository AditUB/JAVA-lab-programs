6a>
fname = input("Enter the filename : ")      
infile = open(fname, "r")
line= int(input("Enter the first N line "))
for x in range(line):
    a = infile.readline()
    print(x+1,":",a)
infile.seek(0)
word = input("Enter a word : ")
cnt = 0
for line in infile:
    r=line.split()
    cnt += r.count(word)
print("The word", word, "appears", cnt, "times in the file")



6b>
import os   
import sys         
import pathlib   
import zipfile  

dirName = input("Enter Directory name that you want to backup : ")
if not os.path.isdir(dirName):
    print("Directory", dirName, "doesn't exists")
    sys.exit(0)
    
curDirectory = pathlib.Path(dirName)

with zipfile.ZipFile("ex.zip","w") as  f:
   for file_path in curDirectory.rglob("*"):  
     f.write(file_path, arcname=file_path.relative_to(curDirectory))
print(file_path)   

if os.path.isfile("ex.zip"):
    print(“created successfully")
else:
    print("Error in creating zip archive")


7a>
import math
class Shape:
    def __init__(self):
        self.area = 0
        self.name = ""


    def showArea(self):
       print("The area of the", self.name, "is", self.area, "units")


class Circle(Shape):
    def __init__(self,radius):
        self.area = 0
        self.name = "Circle"
        self.radius = radius


    def calcArea(self):
        self.area = math.pi * self.radius * self.radius


class Rectangle(Shape):
    def __init__(self,length,breadth):
        self.area = 0
        self.name = "Rectangle"
        self.length = length
        self.breadth = breadth


    def calcArea(self):
        self.area = self.length * self.breadth


class Triangle(Shape):
    def __init__(self,base,height):
        self.area = 0
        self.name = "Triangle"
        self.base = base
        self.height = height


    def calcArea(self):
        self.area = self.base * self.height / 2


c1 = Circle(5)
c1.calcArea()
c1.showArea()


r1 = Rectangle(5, 4)
r1.calcArea()
r1.showArea()


t1 = Triangle(3, 4)
t1.calcArea()
t1.showArea()

7b>
class Employee:
    def __init__(self,Ename,Eid,Edept,Esal):
        self.name=Ename
        self.id=Eid
        self.dept=Edept
        self.sal=Esal
    def display(self):
        print(self.name, self.id,self.dept,self.sal)
    def update_sal(self,dept,sal):
        if(self.dept==dept):
            self.sal=sal
        
Emp=[]
n=int(input("enter the number of employee"))
for i in range(n):
    name= input("Enter Employee name : ")
    eid = input("Enter Employee ID : ")
    dept = input("Enter Employee Dept : ")
    sal= int(input("Enter Employee Salary : "))
    emp1=Employee(name,eid,dept,sal)
    Emp.append(emp1)
print("Employee Details are")
for i in range(n):
     print(Emp[i].name," ",Emp[i].sal)
print("Update salary Particular Department")
dep=input("enter the department of the salary to be updated")
salary=int(input("Enter the salary to be upadated"))
for i in range(n):
    Emp[i].update_sal(dep,salary)
    print(Emp[i].name," ",Emp[i].sal)
8>
class PaliStr:
    def __init__(self):
        self.isPali = False


    def chkPalindrome(self, myStr):
        if myStr == myStr[::-1]:
            self.isPali = True
        else:
            self.isPali = False
        return self.isPali


class PaliInt(PaliStr):
    def __init__(self):
        self.isPali = False


    def chkPalindrome(self, val):
        temp = val
        rev = 0
        while temp != 0:
            dig = temp % 10
            rev = (rev*10) + dig
            temp = temp //10


        if val == rev:
            self.isPali = True
        else:
            self.isPali = False
        return self.isPali


st = input("Enter a string : ")


stObj = PaliStr()
if stObj.chkPalindrome(st):
    print("Given string is a Palindrome")
else:
    print("Given string is not a Palindrome")


val = int(input("Enter a integer : "))
intObj = PaliInt()
if intObj.chkPalindrome(val):
    print("Given integer is a Palindrome")
else:
    print("Given integer is not a Palindrome")

9a>
import requests
import os
from bs4 import BeautifulSoup

url = 'https://xkcd.com/1/'
if not os.path.exists('xkcd_comics'):
    os.makedirs('xkcd_comics')

while True:
    res = requests.get(url)
    res.raise_for_status()

    soup = BeautifulSoup(res.text, 'html.parser')

    comic_elem = soup.select('#comic img')
    if comic_elem == []:
        print('Could not find comic image.')
    else:
        comic_url = 'https:' + comic_elem[0].get('src')

        print(f'Downloading {comic_url}...')
        res = requests.get(comic_url)
        res.raise_for_status()

        image_file = open(os.path.join('xkcd_comics', os.path.basename(comic_url)),'wb')
        for chunk in res.iter_content(100000):
            image_file.write(chunk)
        image_file.close()
    
    prev_link = soup.select('a[rel="prev"]')[0]
    if not prev_link:
        break
    url = 'https://xkcd.com' + prev_link.get('href')
print('All comics downloaded.')

9b>
from openpyxl import Workbook 
from openpyxl.styles import Font
wb = Workbook() 
sheet = wb.active
sheet.title = "Language" 
wb.create_sheet(title = "Capital") # Create sheet and set name 


lang = ["Kannada", "Telugu", "Tamil"]
state = ["Karnataka", "Telangana", "Tamil Nadu"]
capital = ["Bengaluru", "Hyderabad", "Chennai"]
code =['KA', 'TS', 'TN']

sheet.cell(row = 1, column = 1).value = "State"
sheet.cell(row = 1, column = 2).value = "Language"
sheet.cell(row = 1, column = 3).value = "Code"

ft = Font(bold=True)
for row in sheet["A1:C1"]:
    for cell in row:
        cell.font = ft
        
for i in range(2,5):
    sheet.cell(row = i, column = 1).value = state[i-2]
    sheet.cell(row = i, column = 2).value = lang[i-2]
    sheet.cell(row = i, column = 3).value = code[i-2]


wb.save("\demo.xlsx")

srchCode = input("Enter state code for finding language ")
for i in range(2,5):
    data = sheet.cell(row = i, column = 3).value
    if data == srchCode:
        print("Corresponding language for code", srchCode, "is", sheet.cell(row = i, column = 2).value)
wb.close()

10a>
from PyPDF2 import PdfWriter, PdfReader 
num1 = int(input("Enter page number from file1 ")) 
num2 = int(input("Enter page number from file2 ")) 
pdf1 = open("D:\\Even Sem 2023\\ex1.pdf ", 'rb') 
pdf2 = open("D:\\Even Sem 2023\\ex1.pdf ", 'rb') 
pdf_writer = PdfWriter() 
pdf1_reader = PdfReader(pdf1) 
page = pdf1_reader.pages[num1 - 1] 
pdf_writer.add_page(page) 
pdf2_reader = PdfReader(pdf2) 
page = pdf2_reader.pages[num2 - 1] 
pdf_writer.add_page(page) 
with open('D:\\ Even Sem 2023\\output.pdf', 'wb') as output: 
    pdf_writer.write(output) 
print("Combined successfully")

10b>
import json
with open("C:\\Desktop\\weather.json.txt") as f:
    data = json.load(f)
current_temp = data['main']['temp']
humidity = data['main']['humidity']
weather_desc = data['weather'][0]['description']

print(f"Current temperature: {current_temp}°C")
print(f"Humidity: {humidity}%")
print(f"Weather description: {weather_desc}")


